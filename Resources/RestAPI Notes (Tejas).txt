SETUP STUDENT APP:
 Download the StudentsApp.jar file. 
 Open command prompt. Go to the jar folder location (use cd command).
 Enter java -jar studentApp.jar 
 The jar runs on port 8080 by default. 
 As 8080 is already taken by Jenkins, change the port number to 8085 by entering this command instead.
 java -jar studentApp.jar --server.port=8085

STATIC IMPORTS:
 io.restassured.RestAssured.*
 io.restassured.matcher.RestAssuredMatchers.*
 org.hamcrest.Matchers.*

Students App URL:
 http://localhost:8085/student/list

PRINT RESPONSE:
Print a response directly.
Example:
 String str = when().get("...").thenReturn().asString();
 System.out.println(str);
OR simply
 when().get("...").thenReturn().prettyPrint();

QUERY PARAMETERS:
Request URL: http://localhost:8085/student/list
 Query Param: given().queryParam("programme", "Computer Science").queryParam( "limit", 1)
 // OR together
 Query Params: given().queryParams("programme", "Computer Science", "limit", 1)
 // Or using hash map inside Query Params
 Map<String, Object> map = new HashMap<>();
 map.put("programme", "Computer Science");
 map.put("limit", 1);
 given().queryParams(map)

PATH PARAMETER:
 given().pathParam("id", 2).when().get("http://localhost:8085/student/{id}").thenReturn().prettyPrint();

RESET to default base URI, base path, port:
 RestAssured.reset();
 --> this resets Rest Assured fields to default values

POST NEW DATA:
 Using POJO & GSON library --> The name of the variables should match the name of the properties of the JSON data

JAVA Faker API
 Add javafaker dependency
 Create Faker object to generate names & addresses
E.g.
 Faker fake = new Faker();
 student.setFirstName(fake.name().firstName());

PUT & PATCH
PUT:
 Update firstName, lastName, email address using POJO & also supplying the existing data in other fields like 'Programme'.
E.g.
 student.setFirstName(fake.name().firstName());
 student.setLastName(fake.name().lastName());
 student.setEmail(fake.internet().emailAddress());
 student.setProgramme("Mechanical Engineering");
 student.setCourses(Arrays.asList("Heat and Mass Transfer", "Fluid Mechanics", "Dynamics of Machinery"));
 given().contentType(ContentType.JSON).body(student).when().put("101").then().statusCode(200);

PATCH:
 Update only one specific data. No need to supply other existing data.
E.g.
 student.setEmail(fake.internet().emailAddress());
 given().contentType(ContentType.JSON).body(student).when().patch("/101").then().statusCode(200);

LOGS:
Print REQUEST LOGS:-
 Log only Headers E.g. given().log().headers()...
 Log only params E.g. given().log().params()...
 Log (all) only if validation fails E.g. given().log().ifValidationFails().contentType...
Print RESPONSE LOGS:-
 Log only Headers E.g. given().log().headers()...
 Log only params E.g. given().log().params()...
 Log (all) only if validation fails E.g. given().log().ifValidationFails().contentType...

-----------------------------------------------------------------------------------------
                                        Best Buy API
-----------------------------------------------------------------------------------------
Install Node.JS (& npm)
Go to https://github.com/BestBuy/api-playground
Open Git Bash & run the following commands:
 git clone https://github.com/bestbuy/api-playground/
 cd api-playground
 npm install ---> This is for first time run only.
 npm start
 # Best Buy API Playground started at http://localhost:3030

Go to http://localhost:3030 to check if API is working

[ ] -- List
{ } -- Map (denotes an object)

EXTRACT RESPONSES:
I. USING JAYWAY JSONPATH
------------------------
 Add Jayway JsonPath library
 <dependency>
    <groupId>com.jayway.jsonpath</groupId>
    <artifactId>json-path</artifactId>
    <version>2.4.0</version>
 </dependency>
 
JSON Viewer/Formatter:
 http://jsonviewer.stack.hu/

HOW TO USE QUERIES WITH EXAMPLE: --- ###IMPORTANT###
 https://github.com/json-path/JsonPath
 NOTE: Use the example queries listed in this site.

PRACTICE JAYWAY JSONPATH QUERIES HERE: --- ###IMPORTANT###
 https://jsonpath.herokuapp.com/
 
NOTE:
 DETERMINE THE OUTPUT TYPE OF THE QUERY: ## i.e What is Returned When? ##
  Use the online code editor to test the query & determine the return type from the output
  
  Below returns a List:
	.. - a deep scan operator
	?(<expression>) - an expression
	[<number>, <number> (, <number>)] - multiple array indexes

SET UP:
------
 RESOURCE URL: http://localhost:3030/products
 baseURI = "http://localhost";
 port = 3030;
 
 String jsonResponse = when().get("/products").thenReturn().asString();
 
Usage Example:
  int totalCount = JsonPath.read(jsonResponse, "$.total");

GET ROOT ELEMENT:
 Map<String, ?> rootElement = JsonPath.read(jsonResponse, "$");

GET ALL ELEMENTS OF DATA
 List<HashMap<String, Object>> dataElements = JsonPath.read(jsonResponse, "$.data");

GET FIRST ITEM BY INDEX FROM DATA LIST
 HashMap<String, Object> firstElement = JsonPath.read(jsonResponse, "$.data[0]");

GET LAST ELEMENT BY INDEX FROM LIST
 HashMap<String, Object> firstElement = JsonPath.read(jsonResponse, "$.data[-1]");
 Note: -1 denotes last item, -2 is 2nd from last item.

GET ALL IDs INSIDE DATA LIST
 List<Integer> listOfIDs = JsonPath.read(jsonResponse, "$.data[*].id");

GET ALL IDs IN THE JSON
 List<Integer> listOfIDs = JsonPath.read(jsonResponse, "$..id");

GET NAME OF PRODUCTS OF PRICE LESS THAN 5
 List<String> listOfNamesPriceLessThan5 = JsonPath.read(jsonResponse, "$..[?(@.price<5)].name");

XPATH Vs JsonPath Comparison:
---------------------------- 
XPath	JSONPath	Description
/			$		the root object/element
.			@		the current object/element
/		. or []		child operator
//			..		recursive descent. 

XPath expression:
/store/book[1]/title

JsonPath expression:
x.store.book[0].title or x['store']['book'][0]['title']

Issues:
  * Find book with highest price.
    $.max($.store.book[*].price) // throws error
	$.max($.store.book[0].price, $.store.book[1].price, $.store.book[2].price, $.store.book[3].price) // Works!

NOTE:
--> Since jayway returns an array when using filter, we should extract the results with operator [*].
--> Using index returns an element directly (not a list like when using a filter)
--> The index starts from 0, when coming from top, or -1, from bottom.
--> Get everything: 
	Store[books[],[],[],... bicycle[]]
	$..*
	extracts contents from Store first, then 
	extracts contents from this result returned then
	further extracts Strings from  the result above.
	


 To print the result in a single result add a [*] to the query.
----PRINT RESULTS IN A SINGLE LIST----
 {
  "elapsedMilliseconds": 90,
  "count": 125,
  "screens": [
    {
      "id": "en-RP-100",
      "title": "Portret van zanger en cabaretier Aristide Bruant",
      "productionPlaces": [
        [
          "USA",
          "Europe",
          "Asia"
        ],
        [
          "Studio",
          "Apartment",
          "Office"
        ]
      ],
      "showImage": true,
      "cameraType": [
        "Instant camera",
        "Multiplane camera",
        "Press camera"
      ]
    }
  ]
}

QUERY: Find productionPlaces of id='en-RP-100'
$.screens.[?(@.id =="en-RP-100")].productionPlaces[*]
OUTPUT:
[
   [
      "USA",
      "Europe",
      "Asia"
   ],
   [
      "Studio",
      "Apartment",
      "Office"
   ]
]
But if you add another [*] it will remove the outer List & gives result in a single List.
QUERY: $.screens.[?(@.id =="en-RP-100")].productionPlaces[*][*]
OUTPUT:
[
   "USA",
   "Europe",
   "Asia",
   "Studio",
   "Apartment",
   "Office"
]

FURTHER STUDY: 
Also refer to the examples in the link below:
https://valiantys.atlassian.net/wiki/spaces/NFEED58X/pages/66813995/JSONPath+explained
For more practical examples:
https://www.baeldung.com/guide-to-jayway-jsonpath

Another JSONPath online evaluator: http://jsonpath.com/


II. USING JSONSLUPRER JSONPATH
------------------------------
(comes with Rest Assured; no external library files required)

PRACTISE:
 Copy Json response, remove white space (using http://jsonviewer.stack.hu/) & paste it in the code below:
 Go to https://www.tutorialspoint.com/execute_groovy_online.php & copy the code below -

 import groovy.json.JsonSlurper 
 
 class Example {
    static void main(String[] args) {
       def jsonSlurper = new JsonSlurper()
       def object = jsonSlurper.parseText('YOUR_JSON_TEXT') 
      
       println(object.total);
	   println(object.data.find{it.zip == '55901'});
    } 
  }

NOTE:
DETERMINE THE OUTPUT TYPE OF THE QUERY: ## i.e What is Returned When? ##
  Use the online code editor to test the query & determine the return type from the output
  
Groovy library links:
  http://docs.groovy-lang.org/latest/html/groovy-jdk/java/util/Collection.html#findAll()
  http://docs.groovy-lang.org/latest/html/groovy-jdk/java/util/Collection.html#find()


SET UP:
------
 RESOURCE URL: http://localhost:3030/stores
 
 baseURI = "http://localhost";
 port = 3030;
 
 ValidatableResponse validatableResponse = when().get("/stores").then();
 
 Usage Example:
 int total = validatableResponse.extract().path("total");

GET TOTAL COUNT
 int total = validatableResponse.extract().path("total");

GET NAME OF 1ST STORE
 String name = validatableResponse.extract().path("data[0].name");

GET FIRST SERVICE NAME FROM FIRST STORE
 String name = validatableResponse.extract().path("data[0].services[0].name");

GET STORE WITH ZIP CODE 
 Map<String, ?> map = validatableResponse.extract().path("data.find{it.zip == '55901'}");

GET STORE ADDRESS WITH ZIP CODE 
 String address = validatableResponse.extract().path("data.find{it.zip == '55901'}.address");
 
GET STORE WITH MAX/MIN ID
 Map<String, ?> maxId = validatableResponse.extract().path("data.max{it.id}");
 Map<String, ?> minId = validatableResponse.extract().path("data.min{it.id}");
 
GET ZIP OF STORES WITH ID < 10
 List<Map<String, ?>> zipCodes = validatableResponse.extract().path("data.findAll{it.id <10}.zip"); 
 
GET ALL SERVICE NAMES OF ALL THE STORES
 List<List<String>> storeNames = validatableResponse.extract().path("data.services.findAll{it.name}.name");
 
Note: This online groovy code editor worked for stores data but not for products data

 
-----------------------------------------------------------------------------------------
                                        Walmart API
-----------------------------------------------------------------------------------------
 Go to https://developer.walmartlabs.com/
 Click [Developer Console] tab. Enter the API key 75e3u4sgb2khg673cbv2gjup
 Scroll down to Search API. Click the ‘Search’ next to GET. By default the query is set to ipod and format to JSON.
 
TO SEE DATA IN TREE VIEW, GO TO
http://jsonviewer.stack.hu/
 
GET ALL NAMES IN items[]
 List<String> nameList = validatableResponse.extract().path("items.findAll{it.name}.name");
 // Or
 List<String> nameList = validatableResponse.extract().path("items.name");

GET THE MSRP OF ITEMS THAT STARTS WITH name = 'NEW'
 List<Float> msrpList = validatableResponse.extract().path("items.findAll{it.name ==~/New.*/}.msrp");
GET THE MSRP OF ITEMS THAT ENDS WITH name = 'Pack' 
 List<Float> msrpList = validatableResponse.extract().path("items.findAll{it.name==~/.*Pack/}.salePrice");
HINT (for using regex): 
 SQL: name LIKE 'Ref%'
 JP:  name==~/Ref.*/
 So,
 LIKE --> ~
 ' (quote) --> /
 % --> .*

EXTRACT XML RESPONSE USING XMLPATH

TO SEE DATA IN TREE VIEW, GO TO
 https://codebeautify.org/xmlviewer
Note: There's an error in the tree view. The property, 'numItems' appears as 'numitems'.

GET giftOptions FOR THE FIRST ITEM AS A STRING (use with() & getString() methods)
 // STEP 1: Static Import: 
 import static io.restassured.path.xml.XmlPath.*;  	
 // STEP 2: Get the whole xml response as a String value
 String xml = given()
	.queryParam("query","ipod")
	.queryParam("apiKey",APIKEY)
	.queryParam("format","xml")
	.when()
	.get("/search").asString();
 // STEP 3: Use with() & its getString() methods to get only the values of the giftOptions
 String giftOptions = with(xml).getString("searchresponse.items.item[0].giftOptions"); // falsefalsefalse

GET TOTAL SIZE
 Use NodeChildrenImpl object's size() method to get size
 NodeChildrenImpl childrenObj = validatableResponse.extract().path("searchresponse.items.item"); // 10
 
GET SIZE OF ITEMS
 Use NodeChildrenImpl object's size() method to get size
  E.g. NodeChildrenImpl childrenObj = validatableResponse.extract().path("searchresponse.items.item"); // 10
 
GETTING LIST OF VALUES OR FINDING AN ITEM
 Use with() for 
    I. Getting list of values in a single STRING 
	   E.g. String result = with(xmlResponse).getString("searchresponse.items.item[0].giftOptions"); //falsefalsefalse
	II. Get all the ‘names’ in items.item
	    E.g. List<String> nameList = with(xmlResponse).getList("searchresponse.items.item.name");
	III. Find an item
		E.g. List<String> salePrice = with(xmlResponse).getList("searchresponse.items.item.find{it.itemId=='50259424'}.salePrice");
	IV. Deep Scan	
		List<String> salePrice = with(xmlResponse).getList("**.findAll{it.name==~/OREO.*/}.salePrice");
	
NOTE:
 salePrice: 2.98 --> this is represented as a String (not as a Float as in JsonPath)



GROOVY DOCUMENTATION:
https://docs.groovy-lang.org/latest/html/documentation/#gpath_expressions

ISSUES:
-------
Best Buy API did not launch in http://localhost:3030 the firdt time.
 - Re do the whole things again (fronm cloning to npm start) & it worked
 
SLF4J: Failed to load class “org.slf4j.impl.StaticLoggerBinder”
 - Add this dependency
  <dependency>
   <groupId>org.slf4j</groupId>
   <artifactId>slf4j-simple</artifactId>
   <version>1.7.21</version>
  </dependency> 


------------------------------------------
JsonPath Jayway Store Queries With Asnwers:
------------------------------------------
The authors of all books
$..book[*].author

All authors
$..author

All things, both books and bicycles
$..store[*]

The price of everything
$..price

The third book
$..book[2]

The second to last book
$..book[-2]

The first two books
$..book[0,1] or $..book[:2]

All books from index 0 (inclusive) until index 2 (exclusive)
$..book[:2]

All books from index 1 (inclusive) until index 2 (exclusive)
$..book[1:2]

Last two books
$..book[-2,-1] or $..book[-2:] or $..book[2:]

Book number two from tail
$..book[-2]
But in doc, it's --> $..book[2:]

All books with an ISBN number
$..book[?(@.isbn)]

All books in store cheaper than 10
$.store.book[?(@.price <10)]

All books in store that are not "expensive"
$.store.book[?(@.price <$['expensive'])]

All books matching regex (ignore case)
$..book[?(@.author =~ /.*TOLKIEN/i)]

Give me every thing
$..*

The number of books
$..book.length()